/* eslint-disable react/jsx-curly-brace-presence */
/* eslint-disable prettier/prettier */
import React, { ReactElement } from 'react';
import { Meta } from '../../utils/sections';

export const meta: Meta = {
  name: 'Components v36 Release Guide - TypeScript Support',
  date: '2021-04-30',
  authors: [
    {
      name: 'Anton Dozortsev',
      githubUsername: 'dozortsev',
    },
  ],
};

export default function PageContent(): ReactElement {
  return (
    <div>
      <br />
      TypeScript setup for <code>@transferwise/components</code> library.
      <br />
      <br />
      <h2>Features</h2>
      <p />
      <b>Types</b>
      <p>
        The package now provides it is own types for almost all components (see a couple exceptions at the bottom).
        Even though all components written on JavaScript we have found a way to provide pretty accurate (~90%) types already now,
        by using <a href="https://www.npmjs.com/package/react-to-typescript-definitions">react-to-typescript-definitions</a>,
        the tool generates <a href="https://www.typescriptlang.org/docs/handbook/2/type-declarations.html">type declarations</a> based of <a href="https://reactjs.org/docs/typechecking-with-proptypes.html">PropTypes</a>.
      </p>
      <b>JSDoc</b>
      <p>
        Types support enables <a href="https://jsdoc.app/">JSDoc</a> support.<br/>
        You would be able see documentation by hovering over component or its props.
      </p>
      <b>TypeScript Support</b>
      <p>
      We enable ability write code on TypeScript in
      <code>@transferwise/components</code> package.
      <br/>TS code will be transpiled by Babel (via <a href="https://babeljs.io/docs/en/babel-preset-typescript">@babel/preset-typescript</a>),
      type declarations for TS files will be generated by <code>tsc</code> and <code>react-to-typescript-definitions</code> for JS files.
      So next time you contribute please consider to rewrite component(s) to TypeScript otherwise please follow these{' '}
      <a href="https://github.com/transferwise/neptune-web/blob/main/packages/components/CONTRIBUTING.md#js-component-rules">rules for JS components and their props-types</a>{' '}
      to help <code>react-to-typescript-definitions</code> generate accurate types.
      </p>
      <h2 id="breaking-changes">Breaking Changes</h2>
      <p />
      <b>Detached Enums</b>
      <p>
      Removed support for constructions like you see below, instead we provide those enums separately from the package.
      <br/>
      <br/>
      <b>Note:</b> this is very big breaking change what affect loads of packages, we provide codemod script to automate the conversion (see migration checklist).
      <br/>
      <br/>
      Before
      <pre>
        {"import { Alert, Popover, Button } from '@transferwise/components';"}<br/>
        <br/>
        {"<Alert size={Alert.Size.SMALL} />"}<br/>
        {"<Popover preferredPlacement={Popover.Placement.TOP} />"}<br/>
        {"<Button type={Button.Type.POSITIVE} />"}<br/>
      </pre>
      After
      <pre>
        {"import { Alert, Popover, Button, Size, Position, Sentiment } from '@transferwise/components';"}<br/>
        <br/>
        {"<Alert size={Size.SMALL} />"}<br/>
        {"<Popover preferredPlacement={Position.TOP} />"}<br/>
        {"<Button type={Sentiment.POSITIVE} />"}<br/>
      </pre>
      Raw values can also be used although we don&apos;t recommend it:
      <pre>
        {'<Alert size="sm" />'}<br/>
        {'<Popover preferredPlacement="top" />'}<br/>
        {'<Logo type="positive" />'}<br/>
      </pre>
      <b id="reasons-for-enums">The use of the exposed enums is encouraged for a couple of reasons:</b>
      <ul>
        <li>
          Enums are not only for <code>@transferwise/components</code> you can and should use them for your own custom components without the need of create almost exactly the same enums in your codebase
        </li>
        <li>
          This way we will have better consistency in code, as some people call them
          <code>small</code> | <code>medium</code> instead <code>sm</code> | <code>md</code> in their apps, or <code>top_left</code> | <code>top_right</code> vs <code>left-up</code> | <code>right-up</code>,
          some of enums more valuable for consistency e.g <code>Breakpoint</code> - thresholds for switching between mobile view and desktop,
          <code>Sentiment</code> (<code>NEGATIVE</code> - red, <code>NEUTRAL</code> - blue, <code>POSITIVE</code> - green) consistency of naming
        </li>
        <li>TS enables JSDoc, so we can add documentation to them for a better/guided usage</li>
      </ul>
      </p>
      <h2 id="migration-checklist">Migration Checklist</h2>
      <ul>
        <li>
        Make sure all your dependencies migrated to this version or higher version of the package.
        </li>
        <li>Delete custom types declaration for <code>@transferwise/components</code> from{' '}
      <code>global.d.ts</code> / <code>declarations.d.ts</code> and alike files as from now the package provides types.
        </li>
        <li>
        Adjust the usage of enums either manually or by running codemod:
      <pre>
      $ yarn run neptune-upgrade-util<br/>
      ? ✨ Which upgrade would you like to run?<br/>
      ...<br/>
        ▶ 2021-04-v35-36-typescript-support.js<br/>
      </pre>
      </li>
      <li>
        If you have ESLint enabled for TypeScript files make sure to search for <code>eslint-disable-*</code>
        comments with following rules in your code and delete them as now it should not be an issue anymore.
        <ul>
          <li><a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unsafe-assignment.md"><code>@typescript-eslint/no-unsafe-assignment</code></a></li>
          <li><a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unsafe-member-access.md"><code>@typescript-eslint/no-unsafe-member-access</code></a></li>
        </ul>
      </li>
      </ul>

      Mostly applicable for TypeScript projects:
      <ul>
      <li>
        Translations and utils are now can be exported from the package.
        <br />
        Before
        <pre>
          {"import componentTranslations from '@transferwise/components/build/i18n';"}<br/>
          {"import { getLangFromLocale } from '@transferwise/components/build/es/polyfill/common/locale';"}
        </pre>
        After
        <pre>
          {"import { translations, getLangFromLocale } from '@transferwise/components';"}
        </pre>
        You can still use old way but TypeScript compiler will raise a warning.
      </li>
      <li>
      Most likely you would find instances of TypeScript compaining about wrong type passing into props of some of component, please consider to adjust types in such cases,
      you actually might find some edge case bugs. Otherwise ignore some of them via <code>{"// @ts-expect-error"}</code>.
      </li>
      <li>
        You probably would find some redundant props that have been deleted in previous releases of some of components that you still use
        (very often case would be a <code>locale</code> prop), delete them as they dead code by now.
      </li>
      </ul>
      <h2>Misc</h2>
      <p />
      <b>Components that are missing support of types</b>
      <p>
      <code>Upload</code>, <code>MoneyInput</code>, <code>Dimmer</code> and <code>Snackbar</code>. This is because they wrapped into HoC right at <code>export</code>
      statement which react-to-typescript-definitions does not resolve and kinda skips generating types for them. But I guess we would improve/fix that any time soon in next releases.
      </p>
    </div>
  );
}
